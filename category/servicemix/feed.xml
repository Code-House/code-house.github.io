<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Servicemix on The Code-House Blog</title>
    <link>https://blog.code-house.org/category/servicemix/</link>
    <description>Recent content in Servicemix on The Code-House Blog</description>
    <generator>Hugo -- 0.147.0</generator>
    <language>pl-PL</language>
    <lastBuildDate>Wed, 24 Mar 2010 15:26:52 +0000</lastBuildDate>
    <atom:link href="https://blog.code-house.org/category/servicemix/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OSGi-fikacja oraz nowe bundle w repozytorium ServiceMix</title>
      <link>https://blog.code-house.org/2010/03/osgi-new-bundles-servicemix-repository/</link>
      <pubDate>Wed, 24 Mar 2010 15:26:52 +0000</pubDate>
      <guid>https://blog.code-house.org/2010/03/osgi-new-bundles-servicemix-repository/</guid>
      <description>&lt;p&gt;W tym wpisie zostanie omówiony proces OSGi-fikacji artefaktów, który przechodziłem gdy uruchamiałem prostą usługę na ServiceMix, która miała śledzić zewnętrzny RSS i pobierać z niego wpisy. Postanowiłem skorzystać z camel-rss. Przykłady które były do niego załączone są wystarczające by stworzyć odpowiedniego konsumenta&amp;hellip;&lt;/p&gt;
&lt;p&gt;Problem zaczął się gdy usiłowałem uruchomić endpoint camela w OSGi. Mimo poprawnej konfiguracji, rozwiązanych zależności otrzymywałem wyjątek:
[code]java.lang.NoClassDefFoundError: Could not initialize class com.sun.syndication.feed.synd.SyndFeedImpl
at com.sun.syndication.io.SyndFeedInput.build(SyndFeedInput.java:123)
at org.apache.camel.component.rss.RssUtils.createFeed(RssUtils.java:34)
at org.apache.camel.component.rss.RssEntryPollingConsumer.createFeed(RssEntryPollingConsumer.java:54)
at org.apache.camel.component.feed.FeedEntryPollingConsumer.poll(FeedEntryPollingConsumer.java:42)
at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)
[/code]
Naturalnie, strasznie zirytowany, wziąłem się za dochodzenie - początkowo byłem przekonany że brakuje importów w camel-rss jednakże krótkie googlowanie &lt;a href=&#34;http://js.jipiju.com/2009/08/04/osgi-jumping-through-classoading-hoops/&#34;&gt;wskazało rozwiązanie&lt;/a&gt;. Winne było kilka linii w klasie PluginManager:
[code language=&amp;ldquo;java&amp;rdquo;]
private Class[] getClasses() throws ClassNotFoundException {
// Ten ClassLoader wskazuje na bundle w którym jest zdefiniowany endpoint!
ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
List classes = new ArrayList();
boolean useLoadClass = Boolean.valueOf(System.getProperty(&amp;ldquo;rome.pluginmanager.useloadclass&amp;rdquo;, &amp;ldquo;false&amp;rdquo;)).booleanValue();
for (int i = 0; i &amp;lt;_propertyValues.length; i++) {
// Naturalnie tutaj leciał ClassNotFoundException
Class mClass = (useLoadClass ? classLoader.loadClass(_propertyValues[i]) :
Class.forName(_propertyValues[i], true, classLoader));
classes.add(mClass);
}
Class[] array = new Class[classes.size()];
classes.toArray(array);
return array;
}
[/code]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wprowadzenie do Apache ServiceMix 4 cz. 1</title>
      <link>https://blog.code-house.org/2010/03/introduction-to-apache-servicemix4-part-1/</link>
      <pubDate>Mon, 22 Mar 2010 11:19:50 +0000</pubDate>
      <guid>https://blog.code-house.org/2010/03/introduction-to-apache-servicemix4-part-1/</guid>
      <description>&lt;p&gt;Dnia 23 lutego w ramach Warszawa JUG miałem przyjemność wraz z &lt;a href=&#34;http://nurkiewicz.blogspot.com/&#34;&gt;Tomkiem Nurkiewiczem&lt;/a&gt; prezentować narzędzia integracyjne z otwartym kodem źródłowym. Tomek przedstawił Mule ESB, podczas gdy ja zająłem się Apache ServiceMix i Apache Camel. Ze względu na objętość przykładu ten wpis będzie jedynie wprowadzeniem do konsoli.&lt;/p&gt;
&lt;p&gt;Niestety podczas prezentacji nie udało mi się uruchomić przykładu na &amp;ldquo;szynie&amp;rdquo; - ponieważ uniemożliwiły to zależności do bibliotek których nie miałem zapisanych lokalnie. Drugim mym przeciwnikiem był czas - nie było wielu chętnych by słuchać po 2h tłumaczeń dlaczego się nie udało :-) Na problem z zależnościami stworzyłem rozwiązanie i zgłosiłem je do Karaf-a ( &lt;a href=&#34;https://issues.apache.org/jira/browse/FELIX-2141&#34;&gt;FELIX 2141&lt;/a&gt;). W przyszłej wersji - 1.6 - wszyscy będą mogli skorzystać z polecenia &lt;code&gt;features:info -t&lt;/code&gt; które wyświetli całe drzewko zależności potrzebnych do zainstalowania nowych funkcjonalności.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
